const express = require('express');
const router = express.Router();
const Docker = require('dockerode');
const net = require('net');

const hostip = '192.168.255.120';
const docker = new Docker({protocol:'http', host: hostip, port: 2375});
const containerName = 'test_postgres_';
const imageName = 'testpostgres_';

var db_port = 10000;
var used_port = {};

function searchport(host, port, retry_count, callback) {
    if (retry_count == null) {
        retry_count = 100;
    }
    var socket = new net.Socket();

    return new Promise(
        function (resolve, reject) {
            socket.on(
                'error',
                function (e) {
                    resolve(port);
                    if (callback) {
                        callback(null, port);
                    }
                }
            );
            socket.connect(
                port,
                host,
                function () {
                    socket.destroy();
                    reject('no free port');
                }
            );
        }
    ).catch(
        function (err) {
            if (retry_count > 1) {
                return searchport(host, port + 1, retry_count - 1, callback);
            }
            else {
                throw err;
            }
        }
    );
}

function list_postgres(params) {
    return new Promise(
        function(resolve, reject) {
            docker.listContainers(
                params,
                function (err, containers) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        used_port = {};
                        resolve(
                            containers.map(
                                function (x) {
                                    var data  = {
                                        id: x.Id,
                                        image: x.Image,
                                        status: x.Status,
                                        name: x.Names[0].substr(1)
                                    };
                                    var ports = x.Ports.filter(
                                        function (port) {
                                            return port.PublicPort;
                                        }
                                    ).map(
                                        function (port) {
                                            used_port[port.PublicPort] = 1;
                                            return port.PrivatePort + '->' + port.PublicPort;
                                        }
                                    );
                                    if (ports.length > 0) {
                                        data.ports = ports;
                                    }

                                    return data;
                                }
                            )
                        );
                    }
                }
            );
        }
    );
}

function list_images(params) {
    return new Promise(
        function (resolve, reject) {
            docker.listImages(
                params,
                function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else{
                        resolve(
                            Array.prototype.concat.apply(
                                [],
                                data.map(
                                    function (x) {
                                        return x.RepoTags;
                                    }
                                )).filter(
                                    function (x) {
                                        return x.startsWith(imageName);
                                    }
                                )
                        );
                    }
                });
        }
    );
}

function stop_container(id) {
    return new Promise(
        function (resolve, reject) {
            var container = docker.getContainer(id);
            container.stop(
                function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        console.log(data);
                        resolve(data);
                    }
                }
            );
        }
    );
}

function remove_container(id) {
    return new Promise(
        function (resolve, reject) {
            var container = docker.getContainer(id);
            container.remove(
                function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        console.log(data);
                        resolve(data);
                    }
                }
            );
        }
    );
}

function start_container(id) {
    return new Promise(
        function (resolve, reject) {
            var container = docker.getContainer(id);
            container.start(
                function (err, data) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        console.log(data);
                        resolve(data);
                    }
                }
            );
        }
    );
}

function search_postgres_port(hostip, port, containers) {
    return Promise.all(
        [
            searchport(hostip, port),
            containers || list_postgres({all:1})
        ]
    ).then(
        function (results) {
            var port = results[0];
            var containers = results[1];
            console.log(port);
            var newContainerName = containerName + port;
            if (containers.find(
                    function (container) {
                        return container.name == newContainerName;
                    })) {
                console.log('use name:' + newContainerName);
                return search_postgres_port(hostip, port + 1, containers);
            }
            else {
                console.log('port:' + port);
                return port;
            }
        }
    );
}

function create_container(params) {
    return search_postgres_port(
        hostip, db_port
    ).then(
        function (port) {
            params.name = containerName + port;
            params.HostConfig = {
              PortBindings: {
                  '15432/tcp': [{HostPort: port}]
              }
            };
            return new Promise(
                function (resolve, reject) {
                    docker.createContainer(
                        params,
                        function (err, container) {
                            if (err) {
                                err.params = params;
                                reject(err);
                            }
                            else {
                                resolve(container.id);
                            }
                        }
                    );
                }
            );
        }
    ).then(
        start_container
    );
}

const apilist = {
    GET: {
        'list': function (req, res, next) {
            var params = req.query;
            if (!('all' in params)) {
                params.all = 1;
            }
            list_postgres(
                params
            ).then(
                function (data) {
                    res.json(
                        data.filter(
                            function (x) {
                                return x.name.startsWith(containerName);
                            }
                        ));
                    res.statusCode = 200;
                },
                function (err) {
                    res.status(500).json({status: 'NG', err:err});
                }
            );
        },
        'dblist': function (req, res, next) {
            var params = req.query;
            list_images(
                params
            ).then(
                function (data) {
                    res.json(
                        data
                    );
                    res.statusCode = 200;
                },
                function (err) {
                    res.status(500).json({status: 'NG',err:err});
                }
            );
        }
    },
    POST: {
        stop: function (req, res, next) {
            var params = req.body;
            stop_container(
                params.id
            ).then(
                function (data) {
                    res.json({status: 'OK',data:data});
                },
                function (err) {
                    res.status(500).json({status: 'NG',err:err});
                }
            );
        },
        remove: function (req, res, next) {
            var params = req.body;
            remove_container(
                params.id
            ).then(
                function (data) {
                    res.json({status: 'OK',data:data});
                },
                function (err) {
                    res.status(500).json({status: 'NG',err:err});
                }
            );
        },
        start: function (req, res, next) {
            var params = req.body;
            start_container(
                params.id
            ).then(
                function (data) {
                    res.json({status: 'OK',data:data});
                },
                function (err) {
                    res.status(500).json({status: 'NG',err:err});
                }
            );
        },
        create: function (req, res, next) {
            var params = req.body;
            create_container(
                params
            ).then(
                function (data) {
                    res.json({status: 'OK',data:data});
                },
                function (err) {
                    res.status(500).json({status: 'NG',err:err});
                }
            );
        }
    }
};

router.get(
    '/',
    function(req, res, next) {
        res.render('index');
});

router.all(
    '/api/:command',
    function (req, res, next) {
        var command = req.params.command;
//        delete req.params.command;
        if (apilist[req.method] && apilist[req.method][command]) {
            apilist[req.method][command](req, res, next);
        }
        else {
            next();
        }
    }
);

module.exports = router;
